:- compiler_options([xpp_on]).

#include "janus/janus_defs.h"
#include "janus/janus_connect_defs.h"
:- export items/2, keys/2, values/3, obj_dict/2, obj_dir/2.
:- export key/2, value/3.

:- export add_py_lib_dir/1, py_lib_dirs/1.
:- export py_dot/3,py_dot/4,py_func/3, py_func/4,py_iter/3,py_iter/2.
:- export py_next/2.
:- export janus_python_version/1, py_free/1.
:- export py_call/2, py_call/3.
:- export py_is_object/1.
%:- export py_obj_py_iter/2.
:- import pyObj_get_iter_int/2 from janusm.

   
:- import bootstrap_package/2, xsb_running_under/1 from packaging.
:- bootstrap_package(janus, janus).

%:- import term_to_atom/2 from string.
:- import member/2,memberchk/2 from basics.
:- import check_callable/3,check_nonvar/2,domain_error/4
   %,type_error/4
   from error_handler.

:- import init_janus/1 from init_janus.
:- import py_func_int/6,py_dot_int/6, py_get_iter_int/5, pyObj_next_int/4 from janusm.
:- import free_python_object_int/1 from janusm.
:- import add_py_lib_dir/1 from init_janus as add_py_lib_dir/1.
:- import py_lib_dirs/1 from init_janus as py_lib_dirs/1.

%% CHANGE WHEN WINDOZE CONFIG IS INCORPORATED
?- \+xsb_running_under(windows),
   check_installation.

?- init_janus(auto).

%---------

% no options for py_iter.
py_iter(pyObj(Obj),Return):-
    pyObj_get_iter_int(pyObj(Obj),Iter),!,
    py_iter_1(Iter,Return,0).
py_iter(Mod,Call,Return):-
    get_def_vars(Call,py_iter,PosArgNbr,Dict),
    py_get_iter_int(Mod,Call,Dict,PosArgNbr,Iter),
    (Iter = pyIter(_) -> 
	 py_iter_1(Iter,Return,0)
     ;   Return = Iter).    

%py_iter(Mod,Call,Return,Options):-
%    get_def_vars(Call,py_iter,PosArgNbr,Dict),
%    janus_opts(Options,0,Flags),
%    py_get_iter_int(Mod,Call,Dict,PosArgNbr,Iter),
%    py_iter_1(Iter,Return,Flags).

%py_get_iter(Mod,Func,Def_vars,Ret):-
%    (Def_vars == [] -> Dict = 0 ; def_vars_to_dict(Def_vars,Dict)),
%    py_get_iter_int(Mod,Func,Dict,Ret).

py_iter_1(Iter,Return,Flag):-
    pyObj_next_int(Iter,Ret,Indicator,Flag),
    (Indicator = 0 ->
       fail
    ; (Ret = Return
      ; py_iter_1(Iter,Return,Flag))).

%---------

py_func(Mod,Call,Ret,Opts):-
    get_def_vars(Call,py_func,PosArgNbr,Dict),
%    (Dict1 == {}()-> Dict = 0 ; Dict = Dict1),
    janus_opts(Opts,0,Flags),
    py_func_int(Mod,Call,Dict,PosArgNbr,Flags,Ret).

py_func(Mod,Call,Ret):-
    get_def_vars(Call,py_func,PosArgNbr,Dict),
%    writeln(py_func_int(Mod,Call,Dict,PosArgNbr,0,Ret)),
    py_func_int(Mod,Call,Dict,PosArgNbr,MATERIALIZE_ITERS,Ret).

%---------

py_dot(Obj,MethAttr,Ret):-
    get_def_vars(MethAttr,py_dot,PosArgNbr,Dict),
    py_dot_int(Obj,MethAttr,Dict,PosArgNbr,0,Ret).

py_dot(Obj,MethAttr,Ret,Opts):-
    get_def_vars(Obj,py_dot,PosArgNbr,Dict),
    janus_opts(Opts,0,Flags),
    py_dot_int(Obj,MethAttr,Dict,PosArgNbr,Flags,Ret).

janus_opts(Opts,_,Flags):-
    check_nonvar(Opts,['The list of options to a Janus call must be nonvar.']),
    janus_opts_1(Opts,0,Flags).

janus_opts_1([],_,MATERIALIZE_ITERS).
janus_opts_1([sizecheck(true)],In,Out):- !, Out is In \/ SIZECHECK.
janus_opts_1([sizecheck(false)],In,In):- !.
janus_opts_1([py_object(true)],In,Out):- !,Out is In \/ RETURN_PYOBJ.
% keeping around for test suite.
janus_opts_1([iter(true)],In,Out):- !,Out is In \/ MATERIALIZE_ITERS.
janus_opts_1(Opts,_,_):-
   domain_error('janus option list',Opts,'',4).

:- import term_psc/2, psc_arity/2, term_arg/3 from machine.

get_def_vars(Call,Pred,PosArgNbr,Dict):-
    check_callable(Call,'pyfunc/[3,4]',2),
    term_psc(Call, PSC),  
    psc_arity(PSC, Arity),
    get_def_vars_1(Arity,Call,Pred,PosArgNbr,VL),
    (VL= [] -> Dict = 0 ; def_vars_to_dict(VL,Dict)).

get_def_vars_1(0,_,_Pred,0,[]):-!.
get_def_vars_1(ArgNbr,Call,Pred,PosArgNbr,VarList):-
    term_arg(Call,ArgNbr,Arg),
    check_nonvar(Arg,['All arguments of the Python goal ',Call,' in ',Pred/2,' must be nonvar.']),
	(Arg = =(A,B) ->    % checking for A = B as argument.
	 VarList = [A=B|VL1],
	 ArgNbr1 is ArgNbr-1,
	 get_def_vars_1(ArgNbr1,Call,_Pred,PosArgNbr,VL1)
    ;    VarList = [],PosArgNbr = ArgNbr).

def_vars_to_dict(X,{}(Y)):-
    def_vars_to_dict_1(X,Y).
%
def_vars_to_dict_1([A=B],A:B):- !.
def_vars_to_dict_1([A=B|T],','(A:B,T1)):-
    def_vars_to_dict_1(T,T1).
%
%options_to_dict(X,{}(Y)):-
%    options_to_dict_1(X,Y).

%options_to_dict_1([H],H):- !.
%options_to_dict_1([Term|T],','(Functor:Arg,T1)):-
%    Term =.. [Functor,Arg],
%    options_to_dict_1(T,T1).

%cfa - this command is here because of a bug involving loading .xwams - calls to putenv/0 do not work from them
%:- (path_sysop(rm,'./janus/ld_pymod.xwam') -> true ; true) .

%-------------------------------------------------

check_installation :-
	catch(\+ janus_info:janus_info(support,yes),
	      _,
	      throw(error(existence_error(package,janus),
                    context('Error: the XSB package Janus has not been configured - see the XSB manual, volume 2',_)))),
	!,
	throw(error(existence_error(package,janus),
                    context('Error: the package Janus has not been configured - see the XSB manual, volume 2',_))).
check_installation.

py_free(Obj):-
    (Obj = pyObj(_) ->
	 free_python_object_int(Obj)
      ;  abort(['Argument for free_python_object/1 is not a Python object: ',Obj]) ).

janus_python_version(PYTHON_BIN_QUOTED).

%-------------- From jns_utils.P -------------

items(PYDICT_PROLOG(Items),Items).

keys(Dict,Keys):-
   Dict = PYDICT_PROLOG(List),!,
   setof(Key,Val^member(PYTUP_PROLOG(Key,Val),List),Keys).

key(Dict,Key):-
    Dict = PYDICT_PROLOG(List),!,
	member(PYTUP_PROLOG(Key,_Val),List).

%:- import pp_py/1 from pp_py.

values(Dict,List,Val):-
     is_list(List),
     List = [Key],!,
    values(Dict,Key,Val).
values(Dict,List,Val):- 
    is_list(List),
    List = [Key|Rest],!,
    values(Dict,Key,Dict1),
    values(Dict1,Rest,Val).
values(Dict,Key,Val):-
    Dict = PYDICT_PROLOG(List),
%    pp_py(List),
    (nonvar(Key) -> 
	    memberchk(PYTUP_PROLOG(Key,Val),List)
	 ; member(PYTUP_PROLOG(Key,Val),List)).
	 
obj_dict(Obj,Dict):-
    py_dot(Obj,'__dict__',Dict).

obj_dir(Obj,Dir):-
    py_dot(Obj,'__dir__'(),Dir).

:- import pyObj/1 from usermod.
py_call(pyObj(O):Call,Ret):- !,
    py_dot(pyObj(O),Call,Ret).
py_call(Mod:Call,Ret):-
    py_func(Mod,Call,Ret).

py_call(pyObj(O):Call,Ret,Opt):- !,
    py_dot(pyObj(O),Call,Ret,Opt).
py_call(Mod:Call,Ret,Opt):-
    py_func(Mod,Call,Ret,Opt).

py_is_object(pyObj(_)).
py_is_object(pyIter(_)).

% py_next and py_object_py_iter are subsumed by py_iter.
% used to backtrack though 'next' values of an iteration object
%py_next(ObjIn,Next):-
%   iterator_check(ObjIn,Obj),
%    py_next_1(Obj,Next).
%
%iterator_check(pyIter(O),pyIter(O)):- !.
%iterator_check(pyObj(O),pyIter(O)):- !.
%iterator_check(Input,_):-
%    type_error('Python Iterator Object',Input,py_next,2).
%
%py_next_1(Iter,Next):- 
%    pyObj_next_int(Iter,Ret,Indicator,0),
%    (Indicator = 0 ->
 %      fail
%    ; (Ret = Next
%      ; py_next_1(Iter,Next))).

%py_obj_py_iter(pyObj(In),Out):- !,
%    py_obj_get_iter_int(pyObj(In),Out).
%py_obj_py_iter(pyIter(In),pyIter(In)):- !.
%py_obj_py_iter(In,_Out):-
%    term_to_atom(In,Atom),
%    abort(['Input of py_iter/2 must be a module and function, or a Python object reference: ',Atom]).

end_of_file.

%py_iter(Mod,Func,Return):-
%    get_def_vars(Call,PosArgNbr,Dict),
%    py_get_iter(Mod,Func,Def_vars,Iter),
%    py_iter_1(Iter,Return).

%pyfunc(Mod,Func,Def_vars,Ret):-
%    get_def_vars(Call,PosArgNbr,Dict1),
%    (Dict1 == {}()-> Dict = 0 ; true),
%    pyfunc_1(Mod,Func,Dict,Ret).

%pyfunc_1(Mod,Func,Dict,Ret):- 
%    pyfunc_int(Mod,Func,Dict,0,Ret).

